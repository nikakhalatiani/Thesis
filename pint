#!/usr/bin/env python3

"""
Property Inference Engine CLI
A tool for inferring mathematical library of functions through automated testing.
"""

import argparse
import sys
import os
import time
import json
import inspect
from typing import Any

from core.evaluation.library.registry import PropertyRegistry
from core.evaluation.library import (
    create_symmetry_registry, create_algebraic_structure_registry,
    create_special_elements_registry, create_function_analysis_registry,
    create_composition_registry, create_comprehensive_registry,
    create_basic_registry, create_arithmetic_registry,
    create_logical_operations_registry, create_cryptographic_registry,
    create_data_structure_registry
)
from util.input_parser import InputParser
from core.config import PropertyInferenceConfig
from util.function_under_test import FunctionUnderTest, ComparisonStrategy
from core.property_inference_engine import PropertyInferenceEngine
from util.grammar_config import GrammarConfig

from core.generation import (
    load_user_module,
    extract_overrides,
    process_grammar_override,
    process_parser_override,
    extract_functions_from_classes
)

# Registry mapping for CLI options
REGISTRY_FACTORIES = {
    'basic': create_basic_registry,
    'comprehensive': create_comprehensive_registry,

    # Category-specific registries
    'symmetry': create_symmetry_registry,
    'algebraic': create_algebraic_structure_registry,
    'elements': create_special_elements_registry,
    'analysis': create_function_analysis_registry,
    'composition': create_composition_registry,

    # Domain-specific registries
    'arithmetic': create_arithmetic_registry,
    'logical': create_logical_operations_registry,
    'crypto': create_cryptographic_registry,
    'datastructure': create_data_structure_registry,
}

REGISTRY_DESCRIPTIONS = {
    'basic': 'Essential library for general function testing',
    'comprehensive': 'All available library combined',

    # Category-specific
    'symmetry': 'Properties testing argument order/position relationships',
    'algebraic': 'Fundamental algebraic laws (associativity, distributivity)',
    'elements': 'Tests for identity and absorbing elements',
    'analysis': 'General function behavior analysis (injectivity, fixed points)',
    'composition': 'Function composition and interaction library',

    # Domain-specific
    'arithmetic': 'Properties optimized for arithmetic operations (+, -, ×, ÷)',
    'logical': 'Properties for boolean/logical operations (AND, OR, NOT)',
    'crypto': 'Properties for cryptographic and encoding functions',
    'datastructure': 'Properties for data structure operations (union, merge, etc.)',
}


def get_user_classes(module, class_name: str | None = None) -> list[tuple[str, type]]:
    """Extract relevant classes from user module with proper filtering."""
    if class_name:
        if not hasattr(module, class_name):
            raise ValueError(f"Class '{class_name}' not found in module")
        return [(class_name, getattr(module, class_name))]

    # Get all classes defined in this module (not imported)
    classes = []
    for name, obj in inspect.getmembers(module, inspect.isclass):
        if obj.__module__ == module.__name__:
            classes.append((name, obj))

    if not classes:
        available = [name for name, obj in inspect.getmembers(module, inspect.isclass)]
        raise ValueError(f"No user-defined classes found in module. Available classes: {available}")

    return classes


def get_override(func, override_dict: dict[str, Any], func_name: str, attr_name: str) -> Any:
    """Get override value from dict or function attribute."""
    return override_dict.get(func_name) or getattr(func, attr_name, None)


def register_class_functions(class_name: str, cls: type, config: PropertyInferenceConfig,
                             overrides: dict[str, dict[str, Any]], verbose: bool = False) -> int:
    """Register all functions from a class with their overrides."""
    function_count = 0

    for func_name, func in inspect.getmembers(cls, inspect.isfunction):
        try:
            # Get overrides for this function
            converter = get_override(func, overrides['converter'], func_name, '__converter__')
            comparator = get_override(func, overrides['comparator'], func_name, '__comparator__')
            grammar = get_override(func, overrides['grammar'], func_name, '__grammar__')
            parser = get_override(func, overrides['parser'], func_name, '__parser__')

            # Process grammar if needed
            if grammar and not isinstance(grammar, GrammarConfig):
                grammar = process_grammar_override(func_name, grammar, config.default_grammar)

            # Process parser if needed
            if parser and not isinstance(parser, InputParser):
                parser = process_parser_override(func_name, parser)

            # Create and register function
            fut = FunctionUnderTest(func, arg_converter=converter, result_comparator=comparator)
            config.add_function(fut, grammar=grammar, parser=parser)
            function_count += 1

            if verbose:
                print(f"  • Registered {class_name}.{func_name}")

        except Exception as e:
            print(f"Warning: Failed to register {class_name}.{func_name}: {e}", file=sys.stderr)

    return function_count


def list_available_registries():
    """List all available property registries."""
    print("Available Property Registries:")
    print("=" * 60)

    # Group registries by type
    categories = {
        'General Purpose': ['basic', 'comprehensive'],
        'Category-Specific': ['symmetry', 'algebraic', 'elements', 'analysis', 'composition'],
        'Domain-Specific': ['arithmetic', 'logical', 'crypto', 'datastructure']
    }

    for category, registry_names in categories.items():
        print(f"\n{category}:")
        for name in registry_names:
            description = REGISTRY_DESCRIPTIONS.get(name, "No description available")
            print(f"  {name:15} - {description}")

    print(f"\nTotal: {len(REGISTRY_FACTORIES)} registries available")


def list_available_properties(registry):
    """List all available library in the registry."""
    print("Available Properties:")
    print("=" * 50)

    # Get all property tests from the registry
    all_tests = registry.get_all()

    # Group by category
    by_category = {}
    for test in all_tests:
        category = getattr(test, 'category', 'Uncategorized') or 'Uncategorized'
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(test.name)

    # Remove duplicates within each category while preserving order
    for category in by_category:
        seen = set()
        unique_props = []
        for prop in by_category[category]:
            if prop not in seen:
                seen.add(prop)
                unique_props.append(prop)
        by_category[category] = unique_props

    # Display library grouped by category
    for category, props in sorted(by_category.items()):
        print(f"\n{category}:")
        for prop in sorted(props):
            print(f"  • {prop}")

    # Count unique property names
    all_unique_names = set(test.name for test in all_tests)
    print(f"\nTotal: {len(all_unique_names)} unique library")


def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Property Inference Engine - Analyze mathematical library of functions",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s                                    # Use default basic registry
  %(prog)s -f my_functions.py                 # Analyze custom functions
  %(prog)s -r arithmetic -e 500              # Use arithmetic registry with 500 examples
  %(prog)s -r comprehensive -v               # Use all library with verbose output
  %(prog)s --list-registries                 # Show available property registries
  %(prog)s --list-library                 # Show library in current registry
  %(prog)s -p Commutativity Associativity    # Test specific library only
  %(prog)s -r crypto --timing                # Use crypto registry with timing info
  %(prog)s -r algebraic,composition          # Combine multiple registries
        """
    )

    # Input options
    input_group = parser.add_argument_group('Input Options')
    input_group.add_argument(
        '-f', '--functions-file',
        type=str,
        default="input/user_input.py",
        help='Path to Python file containing functions to analyze (default: input/user_input.py)'
    )
    input_group.add_argument(
        '-c', '--class-name',
        type=str,
        default=None,
        help='Name of the class containing functions to analyze (default: all classes)'
    )

    # Property registry options
    registry_group = parser.add_argument_group('Property Registry Options')
    registry_group.add_argument(
        '-r', '--registry',
        type=str,
        default='basic',
        help='Property registry to use. Use comma-separated list to combine multiple registries. '
             'Available: ' + ', '.join(sorted(REGISTRY_FACTORIES.keys())) + ' (default: basic)'
    )
    registry_group.add_argument(
        '--list-registries',
        action='store_true',
        help='List all available property registries and exit'
    )

    # Test configuration
    config_group = parser.add_argument_group('Test Configuration')
    config_group.add_argument(
        '-e', '--examples',
        type=int,
        default=100,
        help='Number of test examples to generate (default: 100)'
    )
    config_group.add_argument(
        '--max-counterexamples',
        type=int,
        default=3,
        help='Maximum number of counterexamples to show (default: 3)'
    )
    config_group.add_argument(
        '-g', '--grammar',
        type=str,
        default="grammars/test.fan",
        help='Default grammar file to use (default: grammars/test.fan)'
    )
    config_group.add_argument(
        '--comparison-strategy',
        choices=['FIRST_COMPATIBLE', 'CONSENSUS', 'MOST_RESTRICTIVE'],
        default='FIRST_COMPATIBLE',
        help='Strategy for comparing results (default: FIRST_COMPATIBLE)'
    )
    config_group.add_argument(
        '--no-cache',
        action='store_true',
        help='Disable caching of generated inputs'
    )

    # Property selection
    property_group = parser.add_argument_group('Property Selection')
    property_group.add_argument(
        '-p', '--library',
        nargs='*',
        help='Specific library to test (if not specified, all library from registry are tested)'
    )
    property_group.add_argument(
        '--list-library',
        action='store_true',
        help='List all available library in the selected registry and exit'
    )

    # Output options
    output_group = parser.add_argument_group('Output Options')
    output_group.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Enable verbose output'
    )
    output_group.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='Suppress all output except results'
    )
    output_group.add_argument(
        '--timing',
        action='store_true',
        help='Show execution timing information'
    )
    output_group.add_argument(
        '--json',
        action='store_true',
        help='Output results in JSON format'
    )
    output_group.add_argument(
        '-o', '--output',
        type=str,
        help='Write results to file instead of stdout'
    )

    # Advanced options
    advanced_group = parser.add_argument_group('Advanced Options')
    advanced_group.add_argument(
        '--dry-run',
        action='store_true',
        help='Show configuration without running tests'
    )

    advanced_group.add_argument(
        '--advanced-mode',
        action='store_true',
        help='Enable model-based feedback loop for constraint generation'
    )
    advanced_group.add_argument(
        '--feedback-iterations',
        type=int,
        default=3,
        help='Number of feedback iterations when advanced mode is enabled (default: 3)'
    )

    return parser.parse_args()


def create_combined_registry(registry_names: list[str]):
    """Create a combined registry from multiple registry names."""
    if len(registry_names) == 1:
        return REGISTRY_FACTORIES[registry_names[0]]()

    # For multiple registries, create a new registry and merge them
    combined = PropertyRegistry()

    for name in registry_names:
        if name not in REGISTRY_FACTORIES:
            raise ValueError(f"Unknown registry: {name}")

        registry = REGISTRY_FACTORIES[name]()
        # Get all tests from the registry and add them to combined registry
        for test in registry.get_all():
            combined.register(test)

    return combined


def validate_arguments(args):
    """Validate command line arguments."""
    errors = []

    # Handle list requests early
    if args.list_registries:
        list_available_registries()
        sys.exit(0)

    # Validate registry names
    registry_names = [name.strip() for name in args.registry.split(',')]
    invalid_registries = [name for name in registry_names if name not in REGISTRY_FACTORIES]
    if invalid_registries:
        errors.append(f"Unknown registries: {', '.join(invalid_registries)}. "
                      f"Available: {', '.join(sorted(REGISTRY_FACTORIES.keys()))}")

    # Check if functions file exists
    if not os.path.exists(args.functions_file):
        errors.append(f"Functions file not found: {args.functions_file}")

    # Check if grammar file exists (only if not using list commands)
    if not args.list_properties and not os.path.exists(args.grammar):
        errors.append(f"Grammar file not found: {args.grammar}")

    # Validate examples count
    if args.examples <= 0:
        errors.append("Number of examples must be positive")

    # Validate max counterexamples
    if args.max_counterexamples < 0:
        errors.append("Max counterexamples must be non-negative")

    # Validate feedback iterations when advanced mode is enabled
    if args.advanced_mode and args.feedback_iterations <= 0:
        errors.append("Feedback iterations must be positive when advanced mode is enabled")

    # Check for conflicting quiet/verbose flags
    if args.quiet and args.verbose:
        errors.append("Cannot use both --quiet and --verbose flags")

    if errors:
        print("Error: Invalid arguments:", file=sys.stderr)
        for error in errors:
            print(f"  • {error}", file=sys.stderr)
        sys.exit(1)


def setup_config(args):
    """Set up the PropertyInferenceConfig based on arguments."""
    # Parse and validate registry names
    registry_names = [name.strip() for name in args.registry.split(',')]

    # Build property registry
    try:
        if len(registry_names) == 1:
            registry = REGISTRY_FACTORIES[registry_names[0]]()
            registry_description = f"{registry_names[0]} registry"
        else:
            registry = create_combined_registry(registry_names)
            registry_description = f"combined registry ({', '.join(registry_names)})"

        if not args.quiet:
            print(f"Using {registry_description}")

    except Exception as e:
        print(f"Error creating registry: {e}", file=sys.stderr)
        sys.exit(1)

    # Handle list library request
    if args.list_properties:
        list_available_properties(registry)
        sys.exit(0)

    # Build base util
    default_parser = InputParser.for_numbers()

    # Set comparison strategy
    strategy_map = {
        'FIRST_COMPATIBLE': ComparisonStrategy.FIRST_COMPATIBLE,
        'CONSENSUS': ComparisonStrategy.CONSENSUS,
        'MOST_RESTRICTIVE': ComparisonStrategy.MOST_RESTRICTIVE
    }

    # Determine max counterexamples. Advanced mode keeps more examples
    max_cex = args.max_counterexamples
    if args.advanced_mode:
        max_cex = max(args.examples, args.max_counterexamples)

    config = (PropertyInferenceConfig(registry)
              .set_default_grammar(args.grammar)
              .set_default_parser(default_parser)
              .set_max_counterexamples(max_cex)
              .set_example_count(args.examples)
              .set_comparison_strategy(strategy_map[args.comparison_strategy])
              .set_use_input_cache(not args.no_cache)
              .set_max_feedback_attempts(args.feedback_iterations)
              .set_feedback_enabled(args.advanced_mode))
    if args.verbose:
        print(f"Configuration:")
        print(f"  • Registry: {registry_description}")
        print(f"  • Examples per test: {args.examples}")
        print(f"  • Max counterexamples: {max_cex}")
        print(f"  • Grammar file: {args.grammar}")
        print(f"  • Comparison strategy: {args.comparison_strategy}")
        print(f"  • Use input cache: {not args.no_cache}")
        print(f"  • Advanced mode: {args.advanced_mode}")
        if args.advanced_mode:
            print(f"  • Feedback iterations: {args.feedback_iterations}")

    return config


def load_and_register_functions(config: PropertyInferenceConfig, args) -> PropertyInferenceConfig:
    """Load user module and register functions using the new architecture."""
    try:
        module = load_user_module(args.functions_file)
    except Exception as e:
        print(f"Error loading functions file: {e}", file=sys.stderr)
        sys.exit(1)

    try:
        # Get user classes using the new architecture
        if args.class_name:
            classes = [(args.class_name, getattr(module, args.class_name))]
        else:
            functions = extract_functions_from_classes(module)
            # Group by class for display purposes
            classes_dict = {}
            for cls, func_name, func in functions:
                if cls not in classes_dict:
                    classes_dict[cls] = cls.__name__
            classes = [(name, cls) for cls, name in classes_dict.items()]

        # Extract overrides
        overrides = extract_overrides(module)

        if args.verbose and any(any(d.values()) for d in overrides.values()):
            print("Found function overrides:")
            for override_type, override_dict in overrides.items():
                if override_dict:
                    print(f"  • {override_type}: {list(override_dict.keys())}")

        # Register functions from classes
        total_functions = 0
        for class_name, cls in classes:
            function_count = register_class_functions(class_name, cls, config, overrides, args.verbose)
            total_functions += function_count

        if not args.quiet:
            class_names = [name for name, _ in classes]
            print(f"Registered {total_functions} functions from {len(classes)} class(es): {', '.join(class_names)}")

        # Add specific library if requested
        if args.properties:
            for prop_name in args.properties:
                try:
                    config.add_property_by_name(prop_name)
                    if args.verbose:
                        print(f"  • Added property: {prop_name}")
                except Exception as e:
                    print(f"Warning: Could not add property '{prop_name}': {e}", file=sys.stderr)

        return config

    except Exception as e:
        print(f"Error processing functions: {e}", file=sys.stderr)
        sys.exit(1)


def print_constraints_evolution_to_lines(constraints_history):
    """Append how constraints evolved during testing to output_lines."""
    lines = []
    if not constraints_history:
        lines.append("🔄 No constraint evolution (property held on first attempt)")
        return lines

    lines.append(f"🔄 Constraint evolution ({len(constraints_history)} iterations):")
    for i, constraints in enumerate(constraints_history, 1):
        if constraints:
            lines.append(f"\tIteration {i}: {', '.join(constraints)}")
        else:
            lines.append(f"\tIteration {i}: No new constraints inferred")
    return lines


def format_results(results: dict, args) -> str:
    """Format results for output."""
    if args.json:
        return json.dumps(results, indent=2, default=str)

    output_lines = []

    for func_name, result in results.items():
        output_lines.append(f"\n📊 Inferred Properties for {func_name}:")

        # Group by category for better readability
        by_category = {}
        for prop, outcome in result["outcomes"].items():
            # Try to get category from the property object if available
            category = getattr(outcome, 'category', 'Properties')
            if category not in by_category:
                by_category[category] = []
            by_category[category].append((prop, outcome))

        for category, props in sorted(by_category.items()):
            if len(by_category) > 1:  # Only show category headers if there are multiple categories
                output_lines.append(f"\n  {category}:")

            for prop, outcome in props:
                holds = outcome["holds"]
                tests_run = outcome["stats"]["total_count"]
                success_count = outcome["stats"]["success_count"]
                confidence = (success_count / tests_run * 100) if tests_run > 0 else 0.0
                status = "🟢" if holds else "🔴"
                constraints_history = result["constraints_history"][prop]

                decision = (
                    f"{status} {prop}"
                    f"(Confidence: {confidence:.1f}%; Tests run: {tests_run})"
                )
                output_lines.append(decision)

                if constraints_history:
                    output_lines.extend(print_constraints_evolution_to_lines(constraints_history))

                messages = outcome["successes"] if holds else outcome["counterexamples"]
                for msg in messages:
                    output_lines.append(f"\t{msg}")

    return "\n".join(output_lines)


def main():
    """Main CLI entry point."""
    args = parse_arguments()

    # Validate arguments
    validate_arguments(args)

    if args.dry_run:
        print("🔍 Dry run mode - showing configuration without executing tests")
        print(f"Functions file: {args.functions_file}")
        print(f"Class name: {args.class_name or 'all classes'}")
        print(f"Registry: {args.registry}")
        print(f"Examples: {args.examples}")
        print(f"Grammar file: {args.grammar}")
        print(f"Comparison strategy: {args.comparison_strategy}")
        print(f"Use cache: {not args.no_cache}")
        if args.properties:
            print(f"Properties to test: {', '.join(args.properties)}")
        else:
            print("Properties to test: all available in registry")
        return

    try:
        # Setup configuration
        config = setup_config(args)

        # Load and register functions
        config = load_and_register_functions(config, args)

        # Run the analysis
        if not args.quiet:
            print("\n🚀 Running property inference analysis...")

        start_time = time.perf_counter() if args.timing else None

        engine = PropertyInferenceEngine(config)
        results = engine.run()

        end_time = time.perf_counter() if args.timing else None

        # Format and output results
        formatted_results = format_results(results, args)

        if args.output:
            with open(args.output, 'w') as f:
                f.write(formatted_results)
            if not args.quiet:
                print(f"✅ Results written to {args.output}")
        else:
            print(formatted_results)

        # Show timing if requested
        if args.timing and start_time and end_time:
            print(f"\n⏱️  Execution time: {end_time - start_time:.4f} seconds")

    except KeyboardInterrupt:
        print("\n❌ Operation cancelled by user", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"❌ Error: {e}", file=sys.stderr)
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
